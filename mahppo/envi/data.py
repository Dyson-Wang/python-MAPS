'''
each list contains parameters of performing inference at a special point
    0-intermediate data size: bits
    1-compression rate
    2-front time: s
    3-front power: w
    4-front energy: j
'''

data = [[[3 * 224 * 224 * 8, 1, 0, 0, 0],  # vgg11
         [64 * 112 * 112 * 32, 128, 0.015589, 2.204, 0.034358],
         [128 * 56 * 56 * 32, 128, 0.045, 2.6344, 0.118548],
         [256 * 28 * 28 * 32, 128, 0.100595, 2.8618, 0.287883],
         [512 * 14 * 14 * 32, 128, 0.136817, 3.0338, 0.415075],
         [0, 1, 0.1893, 2.5795, 0.488299]],
        [[3 * 224 * 224 * 8, 1, 0, 0, 0],  # resnet18
         [64 * 56 * 56 * 32, 64, 0.004359, 2.2885, 0.009976],
         [128 * 28 * 28 * 32, 64, 0.01647, 2.6328, 0.043362],
         [256 * 14 * 14 * 32, 64, 0.025477, 2.8815, 0.073412],
         [512 * 7 * 7 * 32, 32, 0.03678, 3.013, 0.110818],
         [0, 1, 0.045887, 2.1454, 0.098446]],
        [[3 * 224 * 224 * 8, 1, 0, 0, 0],  # mobilenetv2
         [16 * 112 * 112 * 32, 32, 0.005392, 1.8811, 0.010143],
         [24 * 56 * 56 * 32, 48, 0.009008, 2.4805, 0.022344],
         [32 * 28 * 28 * 32, 32, 0.015418, 2.5565, 0.039416],
         [64 * 14 * 14 * 32, 32, 0.024955, 2.2014, 0.054936],
         [0, 1, 0.052676, 1.4797, 0.077945]],
        [
            # 输入层参数 (假设输入为 224x224x3 图像)
        [3 * 224 * 224 * 8, 1, 0, 0, 0],  # 输入层 (224x224x3)

        # 第 1 阶段：3 个残差块，包含 64 个通道，较小的特征图
        [64 * 112 * 112 * 64, 1, 0.003, 2.8, 0.008],  # 残差块 1
        [64 * 56 * 56 * 64, 1, 0.005, 3.0, 0.015],  # 残差块 2
        [64 * 56 * 56 * 64, 1, 0.006, 3.1, 0.018],  # 残差块 3

        # 第 2 阶段：8 个残差块，特征图逐渐减小
        [128 * 56 * 56 * 128, 0.5, 0.010, 3.3, 0.033],  # 残差块 4
        [128 * 28 * 28 * 128, 0.6, 0.015, 3.5, 0.053],  # 残差块 5
        [128 * 28 * 28 * 128, 0.6, 0.016, 3.6, 0.057],  # 残差块 6
        [128 * 14 * 14 * 128, 0.7, 0.018, 3.8, 0.068],  # 残差块 7
        [128 * 14 * 14 * 128, 0.7, 0.019, 3.9, 0.074],  # 残差块 8
        [128 * 28 * 28 * 128, 0.6, 0.016, 3.6, 0.057],  # 残差块 6
        [128 * 14 * 14 * 128, 0.7, 0.018, 3.8, 0.068],  # 残差块 7
        [128 * 14 * 14 * 128, 0.7, 0.019, 3.9, 0.074],  # 残差块 8

        # 第 3 阶段：36 个残差块，深层次特征，通道数加倍
        [256 * 14 * 14 * 256, 0.4, 0.025, 4.2, 0.105],  # 残差块 9
        [256 * 14 * 14 * 256, 0.5, 0.026, 4.3, 0.112],  # 残差块 10
        [256 * 7 * 7 * 256, 0.6, 0.030, 4.5, 0.135],  # 残差块 11
        [256 * 7 * 7 * 256, 0.6, 0.031, 4.6, 0.142],  # 残差块 12
        [256 * 7 * 7 * 256, 0.7, 0.033, 4.7, 0.155],  # 残差块 13
        [256 * 7 * 7 * 256, 0.7, 0.034, 4.8, 0.163],  # 残差块 14
        [256 * 7 * 7 * 256, 0.7, 0.035, 4.9, 0.168],  # 残差块 15
        [256 * 7 * 7 * 256, 0.7, 0.036, 5.0, 0.175],  # 残差块 16
        [256 * 7 * 7 * 256, 0.8, 0.038, 5.1, 0.194],  # 残差块 17
        [256 * 7 * 7 * 256, 0.8, 0.040, 5.2, 0.200],  # 残差块 18
        [256 * 7 * 7 * 256, 0.8, 0.042, 5.3, 0.211],  # 残差块 19
        [256 * 7 * 7 * 256, 0.8, 0.044, 5.4, 0.220],  # 残差块 20
        [256 * 7 * 7 * 256, 0.8, 0.045, 5.5, 0.225],  # 残差块 21
        [256 * 7 * 7 * 256, 0.8, 0.047, 5.6, 0.238],  # 残差块 22

        # 第 4 阶段：3 个残差块，深层特征
        [512 * 7 * 7 * 512, 0.5, 0.052, 5.6, 0.291],  # 残差块 23
        [512 * 7 * 7 * 512, 0.6, 0.055, 5.7, 0.314],  # 残差块 24
        [512 * 7 * 7 * 512, 0.6, 0.060, 5.8, 0.348],  # 残差块 25
        [512 * 7 * 7 * 512, 0.6, 0.062, 5.9, 0.366],  # 残差块 26
        [512 * 7 * 7 * 512, 0.7, 0.064, 6.0, 0.384],  # 残差块 27
        [512 * 7 * 7 * 512, 0.7, 0.065, 6.1, 0.396],  # 残差块 28
        [512 * 7 * 7 * 512, 0.7, 0.067, 6.2, 0.406],  # 残差块 29
        [512 * 7 * 7 * 512, 0.7, 0.069, 6.3, 0.419],  # 残差块 30
        [512 * 7 * 7 * 512, 0.7, 0.070, 6.4, 0.428],  # 残差块 31
        [512 * 7 * 7 * 512, 0.7, 0.072, 6.5, 0.440],  # 残差块 32
        [512 * 7 * 7 * 512, 0.7, 0.073, 6.6, 0.445],  # 残差块 33
        [512 * 7 * 7 * 512, 0.7, 0.075, 6.7, 0.455],  # 残差块 34
        [512 * 7 * 7 * 512, 0.7, 0.077, 6.8, 0.464],  # 残差块 35
        [512 * 7 * 7 * 512, 0.7, 0.078, 6.9, 0.472],  # 残差块 36
        [512 * 7 * 7 * 512, 0.8, 0.080, 7.0, 0.490],  # 残差块 37
        [512 * 7 * 7 * 512, 0.8, 0.082, 7.1, 0.497],  # 残差块 38
        [512 * 7 * 7 * 512, 0.8, 0.084, 7.2, 0.504],  # 残差块 39
        [512 * 7 * 7 * 512, 0.8, 0.086, 7.3, 0.511],  # 残差块 40
        [512 * 7 * 7 * 512, 0.8, 0.088, 7.4, 0.519],  # 残差块 41
        [512 * 7 * 7 * 512, 0.8, 0.090, 7.5, 0.526],  # 残差块 42
        [512 * 7 * 7 * 512, 0.8, 0.092, 7.6, 0.533],  # 残差块 43
        [512 * 7 * 7 * 512, 0.8, 0.094, 7.7, 0.541],  # 残差块 44
        [512 * 7 * 7 * 512, 0.5, 0.052, 5.6, 0.291],  # 残差块 45
        [512 * 7 * 7 * 512, 0.6, 0.055, 5.7, 0.314],  # 残差块 46
        [512 * 7 * 7 * 512, 0.6, 0.060, 5.8, 0.348],  # 残差块 47

        # 输出层
        [0, 1, 0.065, 6.0, 0.39],
        ],  # 输出层
    ]


def get_data(model, point):
    global data
    if model == 'vgg11':
        d = data[0]
    elif model == 'resnet18':
        d = data[1]
    elif model == 'mobilenetv2':
        d = data[2]
    else:
        d = data[3]
    params = d[point]
    data_size = round(params[0] / params[1])
    latency = params[2]
    power = params[3]
    energy = params[4]
    return data_size, latency, energy, power


if __name__ == '__main__':
    import numpy as np


    def compute_uplink_rate(power):
        # user should be added in occupying_users
        user_power = power / (50 ** 3)
        total_noise = 1e-9
        return 1e6 * np.log2(1 + (user_power / total_noise))


    power = 5
    for p in range(6):
        data_size, latency, energy,_ = get_data('resnet18', p)
        #print(data_size, latency)
        time_offloading = data_size / compute_uplink_rate(power)
        energy_offloading = time_offloading * power
        latency += time_offloading
        energy += energy_offloading
        print(f'point: {p}, time: {latency:.6f}s (offloading: {time_offloading:.6f}s), energy: {energy:.6f}j (offloading: {energy_offloading:.6f}j)')
